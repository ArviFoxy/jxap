{
  // General settings for the workspace
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true,
    "**/Thumbs.db": true
  },
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true,
    "build/**": true, // Exclude build directory from file watcher
    "install/**": true // Exclude install directory (lots of headers)
  },
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "build/": true, // Exclude build directory from search
    "install/": true // Exclude install directory (lots of headers)
  },
  // C/C++ specific settings
  "C_Cpp.default.configurationProvider": "ms-vscode.cmake-tools",
  "C_Cpp.formatting": "clangFormat",
  // Python tests 
  "python.testing.unittestEnabled": true,
  "python.testing.pytestEnabled": false,
  "python.testing.unittestArgs": [
    "-v",
    "-s",
    "./python/jxap",
    "-p",
    "*_test.py"
  ],
  // CMake Tools specific settings
  "cmake.configureOnOpen": true,
  "cmake.buildDirectory": "${workspaceFolder}/build", // Standard build directory
  "cmake.generator": "Ninja", // Optional: Use Ninja generator if installed
  "cmake.configureArgs": [
    "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON", // Generate compile_commands.json for better IntelliSense
    "-DCMAKE_BUILD_TYPE=RelWithDebInfo"
  ],
  "cmake.configureSettings": {
    "CMAKE_INSTALL_PREFIX": "${workspaceFolder}/install"
  },
  "cmake.ctestArgs": [
    "--verbose"
  ],
  // Task settings
  "task.problemMatchers.neverPrompt": {
    "shell": true // Avoid prompting for scanning task output
  },
  "files.associations": {
    "any": "cpp",
    "array": "cpp",
    "atomic": "cpp",
    "bit": "cpp",
    "cctype": "cpp",
    "clocale": "cpp",
    "cmath": "cpp",
    "compare": "cpp",
    "concepts": "cpp",
    "condition_variable": "cpp",
    "cstdarg": "cpp",
    "cstddef": "cpp",
    "cstdint": "cpp",
    "cstdio": "cpp",
    "cstdlib": "cpp",
    "cstring": "cpp",
    "ctime": "cpp",
    "cwchar": "cpp",
    "cwctype": "cpp",
    "deque": "cpp",
    "map": "cpp",
    "set": "cpp",
    "string": "cpp",
    "unordered_map": "cpp",
    "vector": "cpp",
    "exception": "cpp",
    "algorithm": "cpp",
    "functional": "cpp",
    "iterator": "cpp",
    "memory": "cpp",
    "memory_resource": "cpp",
    "numeric": "cpp",
    "optional": "cpp",
    "random": "cpp",
    "ratio": "cpp",
    "string_view": "cpp",
    "system_error": "cpp",
    "tuple": "cpp",
    "type_traits": "cpp",
    "utility": "cpp",
    "fstream": "cpp",
    "initializer_list": "cpp",
    "iomanip": "cpp",
    "iosfwd": "cpp",
    "iostream": "cpp",
    "istream": "cpp",
    "limits": "cpp",
    "mutex": "cpp",
    "new": "cpp",
    "numbers": "cpp",
    "ostream": "cpp",
    "semaphore": "cpp",
    "span": "cpp",
    "sstream": "cpp",
    "stdexcept": "cpp",
    "stop_token": "cpp",
    "streambuf": "cpp",
    "thread": "cpp",
    "cinttypes": "cpp",
    "typeinfo": "cpp",
    "variant": "cpp",
    "filesystem": "cpp",
    "codecvt": "cpp",
    "sim_vector": "cpp",
    "*.inc": "cpp",
    "bitset": "cpp",
    "__bit_reference": "cpp",
    "__locale": "cpp",
    "__node_handle": "cpp",
    "__split_buffer": "cpp",
    "__tree": "cpp",
    "__verbose_abort": "cpp",
    "ios": "cpp",
    "locale": "cpp",
    "print": "cpp",
    "queue": "cpp",
    "stack": "cpp",
    "chrono": "cpp",
    "scoped_allocator": "cpp",
    "charconv": "cpp",
    "__hash_table": "cpp",
    "complex": "cpp",
    "forward_list": "cpp",
    "regex": "cpp",
    "expected": "cpp",
    "list": "cpp",
    "sim_stl_pair": "cpp",
    "hash_map": "cpp",
    "hash_set": "cpp",
    "ranges": "cpp",
    "valarray": "cpp",
    "unordered_set": "cpp",
    "alignedvector3": "cpp",
    "propagate_const": "cpp",
    "future": "cpp",
    "shared_mutex": "cpp"
  },
  "python-envs.pythonProjects": []
}